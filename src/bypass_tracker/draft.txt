
  // compute the C2 parameter for each coordinate
  C2_x= ((init_vel(0,0))/(var_xy+(kvxy/2)) + init_pos(0,0) - 3 )/const_den_xy;
  C2_y= ((init_vel(1,0))/(var_xy+(kvxy/2)) + init_pos(1,0) - 3 )/const_den_xy;
  C2_z= ((init_vel(2,0))/(var_z+(kvz/2)) + init_pos(2,0) - 3 + (g/kpz) )/const_den_z;

  C1_x = C2_x + init_pos(0,0) - 3;
  C1_y = C2_y + init_pos(1,0) - 3;
  C1_z = C2_z + init_pos(2,0) - 3 + (g/kpz);

  geometry_msgs::PoseArray custom_trajectory_out;
  custom_trajectory_out.header.stamp    = ros::Time::now();
  custom_trajectory_out.header.frame_id = uav_state_.header.frame_id;

  {
    for (size_t t = 0; t < sample_hor; t++) {

      geometry_msgs::Pose custom_pose;

      custom_pose.position.x = exp(-(kpxy/2)*t)*(C1_x*cos(var_xy*t)+C2_x*sin(var_xy*t))+3;
      custom_pose.position.y = exp(-(kpxy/2)*t)*(C1_y*cos(var_xy*t)+C2_y*sin(var_xy*t))+3;
      custom_pose.position.z = exp(-(kpz/2)*t)*(C1_z*cos(var_z*t)+C2_z*sin(var_z*t))+3 - (g/kpz);

      custom_trajectory_out.poses.push_back(custom_pose);
    }
  }

  try {
    custom_predicted_traj_publisher.publish(custom_trajectory_out);
  }
  catch (...) {
    ROS_ERROR("[MpcTracker]: Exception caught during publishing topic %s.", custom_predicted_traj_publisher.getTopic().c_str());
  }
