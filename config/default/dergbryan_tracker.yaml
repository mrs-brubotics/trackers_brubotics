# issue: why can't we use the dergbryantracker.yaml in testing package? it shshould be loaded in the session.yaml
use_derg: true # if false it bypasses the desired goal reference directly, but still computes the trajectory predictions

run_ERG_each_N_updates: 1 # run ERG and trajectroy predictions after calling the update() routine N times

network:
  robot_names: [
    uav1, uav2, uav3, uav4 , uav5, uav6, uav7, uav8, uav9 , uav10, uav11, uav12, uav13, uav14, uav15, uav16, uav17, uav18, uav19, uav20, uav21, uav22, uav23, uav24, uav25, uav26, uav27, uav28, uav29, uav30
  ]
prediction:
  horizon: 3.0 #[s] default 3.0
  time_step: 0.010 # [s] default 0.010
  use_body_inertia: false # do you want to use the body inertia in the predictions

constraints:
  total_thrust:
    min: 0.0
    # max thrust can be changed via _thrust_saturation_ ratio [0, 1] in the se3_brubotics.yaml
    extra_saturation_ratio: 0.92 #0.90 # ratio [0, 1] allows some overshoot over the hard thrust limit _thrust_saturation_ to reduce the chance of triggering the emergency controller after 1s of saturation
  payload:
    swing: deg(84.8) # rad, max swing angle
  # other constraints need to be set in the constraint_manager.yaml

#TODO bring strategy_id inside agent collision constraints under constraints
strategy_id: 4 #1 #4 #0 / 1 / 2 / 3 / 4TODO / 5
use_distance_xy: true # if enabled the distance ebtween tubes along z will be ignored. Only horizontal xy plane distance is used.
agent_collision_volumes:
  sphere:
    radius: 5.0 # a step of 4.5m in xy does not lead to instability.
  tube:
    radius: 
      lateral: 1.0 #1.5 #1.0 # for the compliant gains, the max overshoots are about this size. The larger thid value, the higher the uav's speed can be and the closer the thrust to saturation.
      longitudinal: 4.0 # = sphere/radius - tube/radius/lateral

dynamic_safety_margin: # BE CAREFUL!
  type_id: 2 # // 1: level set based, 2: trajectory based
  lyapunov: # only used when dsm type_id = 1
    type_id: 2 # 1: traditional, 2: optimally aligned
    epsilon: 0.5 # used only if traditional Lyapunov
  kappa:
    sT: 20 #10 15 20 25 # saturation total thrust
    sw: 13 # 10 13 # saturation angular body rates 
    a: 27 #27 # 10 15 20 25 # agent collision avoidance
    w: 27
    o: 27 
    swing_c: 15.0
    Tc: 15.0
  enable_dsm:
    constant_dsm: -1.0 # 10 # used dsm if all dsms below are disabled or if the value is >= 0.0
    sT: true
    sw: true
    a: true
    w: false
    o: false
    swing_c: true
    Tc: true
navigation_field:
  attraction:
    smoothing_ratio: 0.10 # smoothing factor
  repulsion:
    agents:
      enabled: true
      use_tube: false
      influence_margin: 4.0 #8.0 #4.0 # choose large enough to give uavs time to react. Increase for increased DSMs.
      static_safety_margin: 0.07 # 0.00 # test if agents on a line don't collide without circulation. Increase untill no collsiions. Or check single agent step response deviation of simulation vs reality.
      circulation_gain: 0.05 # put on value < 10^-4 (e.g; 0.0) to switch off. 
      circulation_type: "xy" # "xy", "xz", "yz", "xyz"
    wall:
      enabled: false
      influence_margin: 4.0 # called before sigma, now zeta
      static_safety_margin: 2.0 # d_w
      wall_position_x : 100000 # //Frank : Very big so don't disturb usual tests... TODO : link this yaml with world file
    static_obstacle: #Frank : TO BE ADDED IN DERGTRACKER.CPP
      enabled: false
      influence_margin: 4.0 # called before sigma, now zeta
      static_safety_margin: 1.0 # delta_w
      circulation_gain: 0.05 
      circulation_type: "xy" # "xy", "xz", "yz", "xyz"
      obstacle_position_x : 100000
      obstacle_position_y: 10000
      radius : 1 #0.5 +0.5 of security (see /worlds/...)

two_uavs_payload:
  callback_data_max_time_delay:
    follower: 0.50 # = 10*_dt_0_
    leader: 0.100 # = 20*_dt_0_

enable_visualization: false   # RVIZ
enable_diagnostics_pub: false # Publish diagnostics: distance between agents over time + settling time
enable_trajectory_pub: false # Publish trajectory (state + input) predictions. Topics required for collision avoidance will still be published.

#TODO
#mpc_rate: 100.0 # rate of MPC calculation, >= 10 Hz
# use_wall_constraints: true
# use_cylindrical_constraints: false
# use_agents_avoidence: false